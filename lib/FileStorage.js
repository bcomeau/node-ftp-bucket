// Generated by CoffeeScript 1.10.0
(function () {
    var FileManager, GenericPool, PassThrough, Promise, convert, md5, queryString, url, uuid;

    url = require('url');

    queryString = require('query-string');

    md5 = require('md5');

    Promise = require('bluebird');

    GenericPool = require('generic-pool');

    uuid = require('uuid');

    convert = require('unit-converter');

    PassThrough = require('stream').PassThrough;

    FileManager = (function () {
        function FileManager(settings) {
            var key, query, ref, ref1, value;
            this.settings = settings;
            if (typeof this.settings === 'string') {
                this.settings = url.parse(this.settings);
            }
            if (this.settings.auth) {
                ref = this.settings.auth.split(':'), this.settings.user = ref[0], this.settings.password = ref[1];
                this.settings.username = this.settings.user;
            }
            if (this.settings.query) {
                query = queryString.parse(this.settings.query);
                for (key in query) {
                    value = query[key];
                    this.settings[key] = value;
                }
            }
            this.type = (ref1 = this.settings.protocol) != null ? ref1.replace(':', '') : void 0;
            this.pool = GenericPool.Pool({
                name: this.type,
                create: (function (_this) {
                    return function (callback) {
                        var Connection, connection;
                        Connection = require(__dirname + "/connections/" + _this.type + ".js");
                        connection = new Connection(_this.settings);
                        return connection.connect().then(function () {
                            return callback(null, connection);
                        })["catch"](function (err) {
                            return callback(err);
                        });
                    };
                })(this),
                destroy: (function (_this) {
                    return function (connection) {
                        return connection.close();
                    };
                })(this),
                max: this.settings.maxConnections || 10,
                idleTimeoutMillis: convert(this.settings.ttl || '60s').to('s')
            });
        }

        FileManager.prototype.getConnection = function () {
            return new Promise((function (_this) {
                return function (resolve, reject) {
                    return _this.pool.acquire(function (err, connection) {
                        if (err) {
                            return reject(err);
                        }
                        return resolve(connection);
                    });
                };
            })(this));
        };

        FileManager.prototype.releaseConnection = function (connection) {
            this.pool.release(connection);
            return Promise.resolve();
        };

        FileManager.prototype.saveStream = function (stream, id) {
            if (id == null) {
                id = this.getNewId();
            }
            return this.getConnection().then((function (_this) {
                return function (connection) {
                    var passThrough;
                    id = String(id);
                    passThrough = new PassThrough();
                    stream.pipe(passThrough);
                    return connection.saveStream(passThrough, id).then(function (info) {
                        info.id = id;
                        return info;
                    })["finally"](function () {
                        return _this.releaseConnection(connection);
                    });
                };
            })(this));
        };

        FileManager.prototype.saveData = function (data, id) {
            if (id == null) {
                id = this.getNewId();
            }
            return this.getConnection().then((function (_this) {
                return function (connection) {
                    id = String(id);
                    return connection.saveData(data, id).then(function (info) {
                        info.id = id;
                        return info;
                    })["finally"](function () {
                        return _this.releaseConnection(connection);
                    });
                };
            })(this));
        };

        FileManager.prototype.getStream = function (id) {
            return this.getConnection().then((function (_this) {
                return function (connection) {
                    return connection.getStream(id).then(function (stream) {
                        var releaseCallback, released;
                        released = false;
                        releaseCallback = function () {
                            if (!released) {
                                _this.pool.release(connection);
                            }
                            return released = true;
                        };
                        stream.on('error', releaseCallback);
                        stream.on('finish', releaseCallback);
                        stream.on('end', releaseCallback);
                        stream.on('close', releaseCallback);
                        setTimeout(releaseCallback, 60000);
                        return stream;
                    });
                };
            })(this));
        };

        FileManager.prototype.getData = function (id) {
            return this.getConnection().then((function (_this) {
                return function (connection) {
                    return connection.getData(id)["finally"](function () {
                        return _this.releaseConnection(connection);
                    });
                };
            })(this));
        };

        FileManager.prototype.getNewId = function () {
            return uuid.v4();
        };

        FileManager.prototype.remove = function (id) {
            return this.getConnection().then((function (_this) {
                return function (connection) {
                    return connection.remove(id)["finally"](function () {
                        return _this.releaseConnection(connection);
                    });
                };
            })(this));
        };

        return FileManager;

    })();

    module.exports = FileManager;

}).call(this);